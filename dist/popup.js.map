{"version":3,"file":"popup.js","mappings":";;;;;;AACA;AAAA;AAAA;AADA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AAFA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA","sources":["webpack://LeetNotes/./src/popup/popup.js"],"sourcesContent":["const afterDOMLoaded = () => {\n  const timeElement = document.getElementById(\"time\");\n  const currentDate = new Date().toLocaleTimeString();\n  timeElement.textContent = `${currentDate}`;\n\n  const textArea = document.getElementById(\"solution-code\");\n  const problemTitle = document.getElementById(\"problem-title\");\n  console.log(problemTitle);\n  chrome.storage.sync.get([\"translatedCode\", \"problemTitle\"], (res) => {\n    console.log(res);\n    textArea.textContent = res.translatedCode;\n    problemTitle.value = res.problemTitle;\n  });\n};\n\nsetTimeout(afterDOMLoaded, 2000);\n\nconst checkIfRowExists = (accessToken, spreadsheetId, searchValue) => {\n  const range = \"Sheet1!A:C\";\n  return new Promise((resolve, reject) => {\n    const url = `https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values/${range}`;\n\n    fetch(url, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n        Accept: \"application/json\",\n      },\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        const rows = data.values;\n        if (rows) {\n          const rowExists = rows.some((row) => {\n            if (row.length === 0) return false;\n            return row[0].includes(searchValue);\n          });\n          resolve(rowExists);\n        } else {\n          resolve(false);\n        }\n      })\n      .catch((error) => reject(error));\n  });\n};\n\nconst addToSheet = (e) => {\n  e.preventDefault();\n  const spreadsheetId = \"1GYYxlaE16zhFeC3m3xsGar_iv42EDZnj1HWqlP85J1M\";\n  const range = \"Sheet1!A1:C3\";\n  const url = `https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values/${range}:append?valueInputOption=USER_ENTERED`;\n\n  chrome.storage.sync.get([\"translatedCode\", \"problemTitle\"], async (res) => {\n    const translatedCode = res.translatedCode ?? \"\";\n    const problemTitle = res.problemTitle ?? \"\";\n\n    chrome.identity.getAuthToken(\n      {\n        interactive: true,\n      },\n      async (token) => {\n        console.log(token);\n\n        const rowExists = await checkIfRowExists(token, spreadsheetId, [\n          problemTitle,\n        ]);\n        console.log(rowExists);\n        if (rowExists) alert(\"already exists\");\n        else {\n          fetch(url, {\n            method: \"POST\",\n            headers: {\n              Authorization: `Bearer ${token}`,\n              Accept: \"application/json\",\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n              range: range,\n              majorDimension: \"ROWS\",\n              values: [[problemTitle, translatedCode]],\n            }),\n          })\n            .then((response) => response.json())\n            .then((data) => console.log(data))\n            .catch((error) => console.error(error));\n        }\n      }\n    );\n  });\n};\n\nconst saveButton = document.getElementById(\"save-button\");\n\nsaveButton.addEventListener(\"click\", addToSheet);\n"],"names":[],"sourceRoot":""}